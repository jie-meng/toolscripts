#!/bin/bash

# CLI tools list
tools=(
    "@anthropic-ai/claude-code:2.0.26"
    "@github/copilot:0.0.337"
    "@google/gemini-cli:0.10.0"
    "@iflow-ai/iflow-cli:0.3.9"
    "@qwen-code/qwen-code:0.0.14"
)

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if npm package is installed
is_installed() {
    local package=$1
    npm list -g "$package" > /dev/null 2>&1
    return $?
}

# Get installed version
get_installed_version() {
    local package=$1
    npm list -g "$package" --depth=0 2>/dev/null | grep "$package@" | sed 's/.*@//g' | tr -d '└─ '
}

# Get latest version
get_latest_version() {
    local package=$1
    npm view "$package" version 2>/dev/null
}

# Compare version numbers
version_compare() {
    local installed=$1
    local latest=$2
    
    if [[ "$installed" == "$latest" ]]; then
        return 0  # Same version
    fi
    
    # Use sort -V for version comparison
    if [[ $(echo -e "$installed\n$latest" | sort -V | head -n1) == "$latest" ]]; then
        return 1  # Installed version is newer
    else
        return 2  # New version available
    fi
}

# Install or update package
install_or_update() {
    local package=$1
    local expected_version=$2
    
    log_info "Checking $package..."
    
    if is_installed "$package"; then
        local installed_version=$(get_installed_version "$package")
        local latest_version=$(get_latest_version "$package")
        
        if [[ -z "$installed_version" ]]; then
            log_warning "Cannot get installed version, attempting reinstall..."
            npm install -g "$package@latest"
            return $?
        fi
        
        if [[ -z "$latest_version" ]]; then
            log_error "Cannot get latest version info"
            return 1
        fi
        
        log_info "Installed version: $installed_version"
        log_info "Latest version: $latest_version"
        
        version_compare "$installed_version" "$latest_version"
        case $? in
            0)
                log_success "$package is already up to date ($installed_version)"
                ;;
            1)
                log_warning "$package installed version ($installed_version) is newer than latest ($latest_version)"
                ;;
            2)
                log_info "Updating $package from $installed_version to $latest_version..."
                if npm install -g "$package@latest"; then
                    log_success "$package updated successfully"
                else
                    log_error "$package update failed"
                    return 1
                fi
                ;;
        esac
    else
        log_info "Installing $package..."
        if npm install -g "$package@latest"; then
            log_success "$package installed successfully"
        else
            log_error "$package installation failed"
            return 1
        fi
    fi
    
    echo
}

# Main function
main() {
    log_info "Starting CLI tools check and installation..."
    echo
    
    # Check if npm is available
    if ! command -v npm &> /dev/null; then
        log_error "npm is not installed or not in PATH"
        exit 1
    fi
    
    # Iterate through all tools
    for tool_info in "${tools[@]}"; do
        tool="${tool_info%:*}"
        version="${tool_info#*:}"
        install_or_update "$tool" "$version"
    done
    
    log_success "All CLI tools check completed!"
    
    # Display all installed CLI tools
    echo
    log_info "Currently installed CLI tools:"
    for tool_info in "${tools[@]}"; do
        tool="${tool_info%:*}"
        if is_installed "$tool"; then
            version=$(get_installed_version "$tool")
            echo -e "  ${GREEN}✓${NC} $tool@$version"
        else
            echo -e "  ${RED}✗${NC} $tool (not installed)"
        fi
    done
}

# Run main function
main "$@"